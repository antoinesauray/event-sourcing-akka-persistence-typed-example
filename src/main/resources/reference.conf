
akka {

persistence {
    journal {
      plugin = "jdbc-journal"
      // Enable the line below to automatically start the journal when the actorsystem is started
      // auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      // Enable the line below to automatically start the snapshot-store when the actorsystem is started
      // auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  actor {

    # Disable java serialization
    enable-additional-serialization-bindings = on

    serializers {
      bankEvent = "net.sauray.application.serializers.BankEventSerializer"
    }

    serialization-bindings {
      "net.sauray.domain.events.BankEvent" = bankEvent
    }
  }
  
}

jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    host = "localhost"
    host = ${?MYSQL_HOST}
    port = "3307"
    port = ${?MYSQL_PORT}
    database = "test"
    database = ${?MYSQL_DATABASE}
    url = "jdbc:mysql://"${slick.db.host}":"${slick.db.port}"/"${slick.db.database}"?cachePrepStmts=true&cacheCallableStmts=true&cacheServerConfiguration=true&useLocalSessionState=true&elideSetAutoCommits=true&alwaysSendSetIsolation=false&enableQueryTimeouts=false&connectionAttributes=none&verifyServerCertificate=false&useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&useLegacyDatetimeCode=false&serverTimezone=UTC&rewriteBatchedStatements=true"
    user = "root"
    user = ${?MYSQL_USER}
    password = "example"
    password = ${?MYSQL_PASSWORD}
    driver = "com.mysql.cj.jdbc.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

akka.persistence.query.journal.jdbc-read-journal {
    refresh-interval = 10ms
}
